{
  "version": 3,
  "sources": ["..\\src\\routerInstance.gen.ts"],
  "sourcesContent": [
    "// 925bfb6cb770283b793f97edbb1842ba2a4b14468e0861a9055ededdf94793ba\nimport { checkValidRoute, lazySingleLoader, RouteParams, Router } from \"easy-react-router\";\n\nexport const {\n\tRouteCustomLink,\n\tRouteLink,\n\tRouterRender,\n\tbuildRouteLink,\n\t/** The current route of the app. It is set to undefined if the route is not found (see {@link notFoundRoute}). */\n\tcurrentRoute,\n\tgetRouteParams,\n\tisRouteLoaded,\n\tisRouteLoading,\n\tisRouteVisible,\n\tloadRouteFn,\n\tnavigateToCustomRouteFn,\n\tnavigateToRouteFn,\n\t/** The route that is displayed when the current route is not found. */\n\tnotFoundRoute,\n\tsetRouterBaseRoute,\n\tsetUseRouteTransition,\n\tupdateCurrentRoute,\n\tuseRoutes,\n} = new Router(\n\t{\n\t\t[checkValidRoute(\"/about\")]: lazySingleLoader(() => import(\"./routes/about\"), \"About\"),\n\t\t[checkValidRoute(\"/hugePage\")]: lazySingleLoader(() => import(\"./routes/hugePage\"), \"HugePage\"),\n\t\t[checkValidRoute(\"?id\")]: lazySingleLoader(() => import(\"./routes/index$id\"), \"IndexWithId\"),\n\t\t[checkValidRoute(\"//\")]: lazySingleLoader(() => import(\"./routes/index.index\"), \"Home\"),\n\t\t[checkValidRoute(\"/\")]: lazySingleLoader(() => import(\"./routes/index\"), \"MainLayout\"),\n\t\t[checkValidRoute(\"/posts/:id\")]: lazySingleLoader(() => import(\"./routes/posts.$id\"), \"PostWithId\"),\n\t\t[checkValidRoute(\"/posts/3\")]: lazySingleLoader(() => import(\"./routes/posts.3\"), \"PostWithId3\"),\n\t\t[checkValidRoute(\"/posts/\")]: lazySingleLoader(() => import(\"./routes/posts.index.index\"), \"PostWithoutId\"),\n\t\t[checkValidRoute(\"/posts\")]: lazySingleLoader(() => import(\"./routes/posts\"), \"PostsLayout\"),\n\t},\n\t{\n\t\t[checkValidRoute(\"/\")]: lazySingleLoader(() => import(\"./routes/404\"), \"NotFound\"),\n\t\t[checkValidRoute(\"/posts\")]: lazySingleLoader(() => import(\"./routes/posts.404\"), \"PostNotFound\"),\n\t}\n);\n\n/** The type of the route paths. */\nexport type RouterPathType = typeof currentRoute.value;\n/**\n * @template {string} RoutePath\n * Type of the parameters of a route path.\n * `params` is optional if the route has no parameters.\n * @example\n * type A = RouteParams<\"/a/:b/c?d\">; // { b: string; d?: string; }\n */\nexport type RouterParamsType<T extends RouterPathType> = RouteParams<T>;\n\nupdateCurrentRoute();\n"
  ],
  "mappings": "wJAGO,IACN,kBACA,YACA,eACA,iBAEA,eACA,iBACA,gBACA,iBACA,iBACA,cACA,0BACA,oBAEA,gBACA,qBACA,wBACA,qBACA,aACG,IAAI,EACP,EACE,EAAgB,QAAQ,GAAI,EAAiB,IAAa,2CAAmB,OAAO,GACpF,EAAgB,WAAW,GAAI,EAAiB,IAAa,8CAAsB,UAAU,GAC7F,EAAgB,KAAK,GAAI,EAAiB,IAAa,8CAAsB,aAAa,GAC1F,EAAgB,IAAI,GAAI,EAAiB,IAAa,iDAAyB,MAAM,GACrF,EAAgB,GAAG,GAAI,EAAiB,IAAa,2CAAmB,YAAY,GACpF,EAAgB,YAAY,GAAI,EAAiB,IAAa,+CAAuB,YAAY,GACjG,EAAgB,UAAU,GAAI,EAAiB,IAAa,6CAAqB,aAAa,GAC9F,EAAgB,SAAS,GAAI,EAAiB,IAAa,uDAA+B,eAAe,GACzG,EAAgB,QAAQ,GAAI,EAAiB,IAAa,2CAAmB,aAAa,CAC5F,EACA,EACE,EAAgB,GAAG,GAAI,EAAiB,IAAa,yCAAiB,UAAU,GAChF,EAAgB,QAAQ,GAAI,EAAiB,IAAa,+CAAuB,cAAc,CACjG,CACD,EAaA,EAAmB",
  "debugId": "A2E8D58448D1A37A64756E2164756E21",
  "names": []
}